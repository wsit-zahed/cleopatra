#!/usr/bin/php
<?php

$installer = new Installer();
$installer->installProgram();

class Installer {

    private $startDirectory;
    private $titleData;
    private $completionData;
    private $bootStrapData;
    private $programDataFolder;
    private $programExecutorFolder;
    private $programNameMachine = "cleopatra";
    private $programNameFriendly = " Cleopatra! "; // 12 chars

    public function __construct() {
        require ("src".DIRECTORY_SEPARATOR."Constants.php") ;
        $this->populateStartDirectory() ;
        $this->populateTitle() ;
        $this->populateCompletion() ;
        $this->populateExecutorFile() ;
    }

    public function installProgram() {
        $this->showTitle();
        $this->askForProgramDataFolder();
        $this->askForProgramExecutorFolder();
        $this->deleteProgramDataFolderAsRootIfExists();
        $this->makeProgramDataFolder();
        $this->copyFilesToProgramDataFolder();
        $this->deleteExecutorIfExists();
        $this->saveExecutorFile();
        $this->deleteInstallationFiles();
        $this->changePermissions();
        $this->showCompletion();
    }

    private function showTitle() {
        print $this->titleData ;
    }

    private function showCompletion() {
        print $this->completionData ;
        exit();
    }

    private function askForProgramDataFolder() {
        if (in_array(PHP_OS, array("Windows", "WINNT"))) {
            $this->programDataFolder = 'C:'.
            DS.'Program Files'.DS.$this->programNameMachine.DS.$this->programNameMachine ; }
        else if (in_array(PHP_OS, array("Linux", "Solaris", "FreeBSD", "OpenBSD", "Darwin"))) {
            $this->programDataFolder = DS."opt".DS.$this->programNameMachine.DS.$this->programNameMachine ; }
    }

    private function askForProgramExecutorFolder(){
        if (in_array(PHP_OS, array("Windows", "WINNT"))) {
            $sr = getenv('SystemRoot') ;
            if (file_exists($sr.DS.'System32')) {
                $this->programExecutorFolder = $sr.DS.'System32' ; }
            else {
                $this->programExecutorFolder = $sr.DS.'system32' ; } }
        else if (in_array(PHP_OS, array("Linux", "Solaris", "FreeBSD", "OpenBSD", "Darwin"))) {
            $this->programExecutorFolder = DS.'usr'.DS.'bin' ; }
    }

    private function deleteProgramDataFolderAsRootIfExists(){
        if (in_array(PHP_OS, array("Windows", "WINNT"))) {
            $command = "rmdir /S /Q " ; }
        else if (in_array(PHP_OS, array("Linux", "Solaris", "FreeBSD", "OpenBSD", "Darwin"))) {
            $command = "rm -rf " ; }
        if ( is_dir($this->programDataFolder)) {
            $fullCommand = $command.$this->programDataFolder;
            self::executeAndOutput($fullCommand, "Program Data Folder $this->programDataFolder Deleted if existed"); }
        return true;
    }

    private function makeProgramDataFolder(){
            echo "No Program dir found, creating {$this->programDataFolder}\n" ;
            if (in_array(PHP_OS, array("Windows", "WINNT"))) {
                self::executeAndOutput("mkdir ".$this->programDataFolder) ; }
            else if (in_array(PHP_OS, array("Linux", "Solaris", "FreeBSD", "OpenBSD", "Darwin"))) {
                self::executeAndOutput("mkdir -p ".$this->programDataFolder) ; }
    }

    private function copyFilesToProgramDataFolder(){
        if (in_array(PHP_OS, array("Windows", "WINNT"))) {
            $command = "runas /noprofile /user:Administrator copy " ;
            $command3 = $command.dirname(__FILE__).' '.dirname($this->programDataFolder); }

        else {
            $command = "sudo cp -r " ;
            $command3 = $command.dirname(__FILE__).DS.'* '.$this->programDataFolder ; }

        echo $command3 . "\n" ;
        self::executeAndOutput($command3, "Program Data folder populated with program files\n");

        if (is_dir(dirname(__FILE__).DS.'.git')) {
            $command2 = $command.dirname(__FILE__).DS.'.git '.$this->programDataFolder;
            echo $command2 . "\n" ;
            self::executeAndOutput($command2, "Program Data folder populated with hidden files\n"); }

        return true;
    }

    private function deleteExecutorIfExists(){
        if (in_array(PHP_OS, array("Windows", "WINNT"))) { $extension = ".bat" ; }
        else { $extension = "" ; }
        if (file_exists($this->programExecutorFolder.DS.$this->programNameMachine.$extension)) {
            if (in_array(PHP_OS, array("Windows", "WINNT"))) {
                $command = "del " ; }
            else if (in_array(PHP_OS, array("Linux", "Solaris", "FreeBSD", "OpenBSD", "Darwin"))) {
                $command = "rm -rf " ; }
            echo "Adding executor ".$command.$this->programExecutorFolder.DS.$this->programNameMachine.$extension."...\n" ;
            $fullCommand = $command.$this->programExecutorFolder.DS.$this->programNameMachine.$extension;
            self::executeAndOutput($fullCommand, "Old Program Executor Deleted\n"); }
        return true;
    }

    private function deleteInstallationFiles(){
        echo "Changing shell to parent directory...\n" ;
        $cdup = 'cd '.dirname(__FILE__);
        self::executeAndOutput($cdup);
        echo "Deleting install files...\n" ;
        if (in_array(PHP_OS, array("Windows", "WINNT"))) {
            $command = "rmdir /S /Q " ; }
        else {
            $command = "sudo rm -rf " ; }
        $fullCommand = $command.$this->startDirectory.DS.$this->programNameMachine;
        echo $fullCommand."\n" ;
        self::executeAndOutput($fullCommand);
    }

    private function saveExecutorFile(){
        $this->populateExecutorFile();
        if (in_array(PHP_OS, array("Windows", "WINNT"))) {
            echo "Saving executor file {$this->programNameMachine}.bat to {$this->programExecutorFolder} ...\n" ;
            echo "Saving temp file ".BASE_TEMP_DIR.$this->programNameMachine.".bat first ...\n" ;
            echo (is_int(file_put_contents(BASE_TEMP_DIR.$this->programNameMachine.".bat", $this->bootStrapData))) ? "Temp file written\n" : "Temp file failed writing" ;
            echo "Copying temp file ".BASE_TEMP_DIR.$this->programNameMachine.".bat to ".$this->programExecutorFolder.DS.$this->programNameMachine.".bat ...\n" ;
            $command = "runas /noprofile /user:Administrator copy " ;
            $command .= BASE_TEMP_DIR.$this->programNameMachine.".bat".' '.$this->programExecutorFolder.DS ;
            echo $command ;
            self::executeAndOutput($command);
            echo "Removing temp file ".$this->programNameMachine.".bat" ;
            //unlink(BASE_TEMP_DIR.$this->programNameMachine.".bat") ;
            }
        else {
            echo "Saving executor file {$this->programNameMachine} to {$this->programExecutorFolder} ...\n" ;
            $fname = $this->programExecutorFolder.DS.$this->programNameMachine ;
            return file_put_contents($fname, $this->bootStrapData); }
    }

    private function changePermissions(){
        // @todo does windows need something like this?
        if (in_array(PHP_OS, array("Linux", "Solaris", "FreeBSD", "OpenBSD", "Darwin"))) {
            echo "Changing *NIX based permissions...\n" ;
            $command = "chmod -R 775 $this->programDataFolder";
            self::executeAndOutput($command);
            $command = "chmod 775 $this->programExecutorFolder".DS.$this->programNameMachine;
            self::executeAndOutput($command); }
    }

    private function populateTitle() {
$this->titleData = <<<TITLE
*******************************
*        Pharaoh Tools        *
*         $this->programNameFriendly        *
*******************************


TITLE;
    }

    private function populateCompletion() {
$this->completionData = <<<COMPLETION
... All done!
*******************************
Thanks for installing , visit www.pharaohtools.com for more

COMPLETION;
    }

    private function populateExecutorFile() {
        if (in_array(PHP_OS, array("Windows", "WINNT"))) {
            $this->bootStrapData =
"<?php\r\nrequire('".$this->programDataFolder.DS."src".DS."Bootstrap.php"."');\r\n?>"; }
        else if (in_array(PHP_OS, array("Linux", "Solaris", "FreeBSD", "OpenBSD", "Darwin"))) {
            $this->bootStrapData =  "#!".DS."usr".DS."bin".DS."php\n" ;
            $this->bootStrapData .=
"<?php\n\nrequire('".$this->programDataFolder.DS."src".DS."Bootstrap.php"."');\n\n?>"; }
    }

    private function populateStartDirectory() {
        $this->startDirectory = str_replace(DS."$this->programNameMachine", "", dirname(__FILE__));
    }

    private function executeAndOutput($command, $message=null) {
        $outputArray = array();
        exec($command, $outputArray);
        $outputText = "";
        foreach ($outputArray as $outputValue) {
            $outputText .= "$outputValue\n"; }
        if ($message !== null) {
            $outputText .= "$message\n"; }
        print $outputText;
        return true;
    }

}