#!/usr/bin/php
<?php

$installer = new Installer();
$installer->installProgram();

class Installer {

    private $startDirectory;
    private $titleData;
    private $completionData;
    private $bootStrapData;
    private $programDataFolder;
    private $programExecutorFolder;
    private $programNameMachine = "cleopatra";
    private $programNameFriendly = " Cleopatra! "; // 12 chars

    public function __construct() {
        define ("DS", DIRECTORY_SEPARATOR) ;
        $this->populateStartDirectory() ;
        $this->populateTitle() ;
        $this->populateCompletion() ;
        $this->populateExecutorFile() ;
    }

    public function installProgram() {
        $this->showTitle();
        $this->askForProgramDataFolder();
        $this->askForProgramExecutorFolder();
        $this->deleteProgramDataFolderAsRootIfExists();
        $this->makeProgramDataFolderIfNeeded();
        $this->copyFilesToProgramDataFolder();
        $this->deleteExecutorIfExists();
        $this->saveExecutorFile();
        $this->deleteInstallationFiles();
        $this->changePermissions();
        $this->showCompletion();
    }

    private function showTitle() {
        print $this->titleData ;
    }

    private function showCompletion() {
        print $this->completionData ;
    }

    private function askForProgramDataFolder() {
        if (in_array(PHP_OS, array("Windows", "WINNT"))) {
            $this->programDataFolder = 'C:'.DS.'Program Files'.DS."opt".DS.$this->programNameMachine.DS.$this->programNameMachine ; }
        else if (in_array(PHP_OS, array("Linux", "Solaris", "FreeBSD", "OpenBSD", "Darwin"))) {
            $this->programDataFolder = DS."opt".DS.$this->programNameMachine.DS.$this->programNameMachine ; }
    }

    private function askForProgramExecutorFolder(){
        if (in_array(PHP_OS, array("Windows"))) {
            $this->programExecutorFolder = 'C:'.DS.'system32' ; }
        else if (in_array(PHP_OS, array("WINNT"))) {
            $this->programExecutorFolder = 'C:'.DS.'System32' ; }
        else if (in_array(PHP_OS, array("Linux", "Solaris", "FreeBSD", "OpenBSD", "Darwin"))) {
            $this->programExecutorFolder = DS.'usr'.DS.'bin' ; }
    }

    private function deleteProgramDataFolderAsRootIfExists(){
        if (in_array(PHP_OS, array("Windows", "WINNT"))) {
            $command = "rmdir /S /Q " ; }
        else if (in_array(PHP_OS, array("Linux", "Solaris", "FreeBSD", "OpenBSD", "Darwin"))) {
            $command = "rm -rf " ; }
        if ( is_dir($this->programDataFolder)) {
            $fullCommand = $command.$this->programDataFolder;
            self::executeAndOutput($fullCommand, "Program Data Folder $this->programDataFolder Deleted if existed"); }
        return true;
    }

    private function makeProgramDataFolderIfNeeded(){
        if (!file_exists($this->programDataFolder)) {
            mkdir($this->programDataFolder,  0777, true); }
    }

    private function copyFilesToProgramDataFolder(){
        if (in_array(PHP_OS, array("Windows", "WINNT"))) {
            $command = "copy -r " ; }
        else if (in_array(PHP_OS, array("Linux", "Solaris", "FreeBSD", "OpenBSD", "Darwin"))) {
            $command = "cp -r " ; }
        if (is_dir(dirname(__FILE__).DS.'.git')) {
            $command2 = $command.dirname(__FILE__).DS.'.git '.$this->programDataFolder;
            echo $command2 . "\n" ;
            self::executeAndOutput($command2, "Program Data folder populated with hidden files"); }
        if (in_array(PHP_OS, array("Windows", "WINNT"))) {
            $command3 = $command.dirname(__FILE__).' '.dirname($this->programDataFolder); ; }
        else if (in_array(PHP_OS, array("Linux", "Solaris", "FreeBSD", "OpenBSD", "Darwin"))) {
            $command3 = $command.dirname(__FILE__).DS.'* '.$this->programDataFolder ; }
        echo $command3 . "\n" ;
        return self::executeAndOutput($command3, "Program Data folder populated with other files");
    }

    private function deleteExecutorIfExists(){
        if (in_array(PHP_OS, array("Windows", "WINNT"))) {
            $command = "del -r " ; }
        else if (in_array(PHP_OS, array("Linux", "Solaris", "FreeBSD", "OpenBSD", "Darwin"))) {
            $command = "rm -rf " ; }
        $fullCommand = $command.$this->programExecutorFolder.DS.$this->programNameMachine;
        self::executeAndOutput($fullCommand, "Program Executor Deleted if existed");
        return true;
    }

    private function deleteInstallationFiles(){
        if (in_array(PHP_OS, array("Windows", "WINNT"))) {
            $command = "del -r " ; }
        // else if (in_array(PHP_OS, array("Linux", "Solaris", "FreeBSD", "OpenBSD", "Darwin"))) {
        else {
            $command = "rm -rf " ; }
        $fullCommand = $command.$this->startDirectory.DS.$this->programNameMachine;
        self::executeAndOutput($fullCommand);
    }

    private function saveExecutorFile(){
        $this->populateExecutorFile();
        return file_put_contents($this->programExecutorFolder.DS.$this->programNameMachine, $this->bootStrapData);
    }

    private function changePermissions(){
        // @todo does windows need something like this?
        if (in_array(PHP_OS, array("Linux", "Solaris", "FreeBSD", "OpenBSD", "Darwin"))) {
            $command = "chmod -R 775 $this->programDataFolder";
            self::executeAndOutput($command);
            $command = "chmod 775 $this->programExecutorFolder".DS.$this->programNameMachine;
            self::executeAndOutput($command); }
    }

    private function askForInput($question, $required=null) {
        $fp = fopen('php://stdin', 'r');
        $last_line = false;
        while (!$last_line) {
            print "$question\n";
            $inputLine = fgets($fp, 1024);
            if ($required && strlen($inputLine)==0 ) {
                print "You must enter a value. Please try again.\n"; }
            else {$last_line = true;} }
        $inputLine = $this->stripNewLines($inputLine);
        return $inputLine;
    }

    private function populateTitle() {
$this->titleData = <<<TITLE
*******************************
*        Pharaoh Tools        *
*         $this->programNameFriendly        *
*******************************


TITLE;
    }

    private function populateCompletion() {
$this->completionData = <<<COMPLETION
... All done!
*******************************
Thanks for installing , visit www.pharaohtools.com for more

COMPLETION;
    }

    private function populateExecutorFile() {
        if (in_array(PHP_OS, array("Windows", "WINNT"))) {
            $this->bootStrapData = "" ; }
        else if (in_array(PHP_OS, array("Linux", "Solaris", "FreeBSD", "OpenBSD", "Darwin"))) {
            $this->bootStrapData =  "#!".DS."usr".DS."bin".DS."php\n" ; }
        $this->bootStrapData .=
"<?php\n
require('".$this->programDataFolder.DS."src".DS."Bootstrap.php"."');\n
?>";
    }

    private function populateStartDirectory() {
        $this->startDirectory = str_replace(DS."$this->programNameMachine", "", dirname(__FILE__));
    }

    private function stripNewLines($inputLine) {
        $inputLine = str_replace("\n", "", $inputLine);
        $inputLine = str_replace("\r", "", $inputLine);
        return $inputLine;
    }

    private function executeAndOutput($command, $message=null) {
        $outputArray = array();
        exec($command, $outputArray);
        $outputText = "";
        foreach ($outputArray as $outputValue) {
            $outputText .= "$outputValue\n"; }
        if ($message !== null) {
            $outputText .= "$message\n"; }
        print $outputText;
        return true;
    }

}